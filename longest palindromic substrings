class Solution {
public:
    string longestPalindrome(string s) {
        if (s.empty()) {
            return "";
        }

        int start = 0;
        int maxLength = 1; // A single character is always a palindrome

        // Helper function to expand around a center and find palindrome length
        auto expandAroundCenter = [&](int left, int right) {
            while (left >= 0 && right < s.length() && s[left] == s[right]) {
                left--;
                right++;
            }
            return right - left - 1; // Length of the palindrome found
        };

        for (int i = 0; i < s.length(); ++i) {
            // Case 1: Odd length palindromes (center is a single character)
            int len1 = expandAroundCenter(i, i);

            // Case 2: Even length palindromes (center is between two characters)
            int len2 = expandAroundCenter(i, i + 1);

            int currentMaxLen = max(len1, len2);

            if (currentMaxLen > maxLength) {
                maxLength = currentMaxLen;
                // Calculate the new start index for the longest palindrome
                start = i - (maxLength - 1) / 2;
            }
        }

        return s.substr(start, maxLength);
    }
};
