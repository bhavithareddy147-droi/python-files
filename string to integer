class Solution {
public:
    int myAtoi(string s) {
        int i = 0;
        int n = s.length();
        long long result = 0; // Use long long to handle potential overflow during calculation
        int sign = 1;

        // 1. Ignore leading whitespace
        while (i < n && s[i] == ' ') {
            i++;
        }

        // 2. Determine sign
        if (i < n && (s[i] == '-' || s[i] == '+')) {
            sign = (s[i] == '-') ? -1 : 1;
            i++;
        }

        // 3. Read digits and convert
        while (i < n && s[i] >= '0' && s[i] <= '9') {
            result = result * 10 + (s[i] - '0');

            // 4. Handle overflow/underflow during calculation
            if (sign == 1 && result > INT_MAX) {
                return INT_MAX;
            }
            if (sign == -1 && -result < INT_MIN) { // Note: -result to compare with INT_MIN
                return INT_MIN;
            }
            i++;
        }

        return static_cast<int>(result * sign);
    }
};
