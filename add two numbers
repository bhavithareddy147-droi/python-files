/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* dummyHead = new ListNode(0); // Create a dummy head for the result list
        ListNode* current = dummyHead;         // Pointer to build the result list
        int carry = 0;                         // Variable to store the carry-over

        // Iterate while either list has elements or there's a carry
        while (l1 != nullptr || l2 != nullptr || carry != 0) {
            int val1 = (l1 != nullptr) ? l1->val : 0; // Get value from l1, or 0 if l1 is null
            int val2 = (l2 != nullptr) ? l2->val : 0; // Get value from l2, or 0 if l2 is null

            int sum = val1 + val2 + carry; // Calculate the sum of digits and carry
            carry = sum / 10;              // Update the carry
            int digit = sum % 10;          // Get the current digit for the result

            current->next = new ListNode(digit); // Create a new node with the digit
            current = current->next;             // Move the current pointer forward

            if (l1 != nullptr) {
                l1 = l1->next; // Move l1 to the next node
            }
            if (l2 != nullptr) {
                l2 = l2->next; // Move l2 to the next node
            }
        }

        return dummyHead->next; // Return the head of the result list (skipping the dummy)
    }
};
